// IDL du 14/06/13
// Module de gestion d'assistance touristique
module AssistanceTouristique{
	// --#### Définitions des types
	typedef string t_raison; // type message de raison d'exception
	
	// Structure Coordonnees permettant d'indiquer la latitude et la longitude d'une coordonnée
	struct Coordonnees{
		float latitude;
		float longitude;
	};
	
	// Structure Carte permettant d'indiquer les informations relatives à la carte électronique virtuelle d'un touriste
	struct Carte{
		short idCarte;
		string dateDebut;
		string dateFin;
	};
		
	// Structure Visite permettant d'indiquer les informations relatives à une visite 
	struct Visite{
                short idVisite;
		string date;
		string heureEntree;
		string heureSortie;
		float interet;
	};
	
	// Structure Site permettant d'indiquer les informations générales relatives à un site touristique
	struct Site{
                short idSite;
		string titre;
		Coordonnees coord;
                string horaireOuverture;
                string horairesFermeture;
                string description;
                string adresse;
                string telephone;
		float affluenceCourante;
	};
		
	typedef sequence<Site> t_listeSites; // type liste de sites touristiques
	typedef sequence<Visite> t_listeVisites; // type liste de visites
        typedef sequence<short> t_listeId; //type liste des identifiants
	
	//--#### Définitions des interfaces
	
	// Interface SmartphoneTouriste
	interface SmartphoneTouriste{
		// Attributs 
		readonly attribute short idCarteAchetee; // accessible
		
		// Méthodes
		void notifierAvisVisite(in Visite visite, in Site site);
	};
	
	// Interface Office
	interface Office{
		// Méthodes
		t_listeSites getListeSitesAVisiter(in short idCarte, in Coordonnees coordGPS, in t_listeId listeIdSitesVisites);	// renvoie la liste des informations relatives aux sites à visiter
	};
	
	// Interface ServiceAchat
	interface ServiceAchatOffice{
		// Méthodes
		Carte acheterPrestation(in string dateD, in string dateF, in float montant); // renvoie l'identifiant de la carte générée
		
	};
	
	// Interface SiteTouristique
	interface SiteTouristique{
		// Méthodes
		Site getInfoSite();	// revoie l heure de fermeture du site sous la forme HHMM
	};
	
	// Interface ServiceESSite
	interface ServiceESSite{
		// Exceptions
		exception carteNonValideException {t_raison raison;};
	
		// Méthodes		
		oneway void autoriserEntree(in Carte carte);	// enregistre la carte comme valide pour la période correspondante
		boolean entrer(in short idCarte) raises (carteNonValideException);	// revoie true si l'entrée correspondant à l'idCarte est possible, false sinon
		oneway void sortir(in short idVisite);
		oneway void donnerAvisVisite(in Visite visite, in float satisfaction);
		float getAffluenceCourante();    // renvoie l'affluence courante du site touristique
                float generateAffluenceQuotidienne();    // renvoie l'affluence quotidienne du site touristique (calculée)
                string generateDureeMoyenneVisite();    // renvoie la durée moyenne d'une visite du site touristique (calculée)
                string generateDureeMinimaleVisite();    // renvoie la durée minimale d'une visite du site touristique (calculée)
                string generateDureeMaximaleVisite();    // renvoie la durée maximale d'une visite du site touristique (calculée)
                float generateTauxSatisfaction();     // renvoie le taux de satisfaction moyen du site passé en paramètre
                boolean generateEstFavoris();  // renvoie vrai si le site est favoris, faux sinon
	};
		
	// Interface ServiceDeplacement
	interface ServiceDeplacement{
		// Méthodes
		long calculerDureeTrajet(in Coordonnees coordGPS_A, in Coordonnees coordGPS_B, in string mode);	// renvoie la durée du trajet en minute
	};
	
	// Interface ServiceBanque
	interface ServiceBancaire{
		// Exceptions
		exception operationImpossibleException {t_raison raison;};
		
		// Méthodes
		boolean verifierPaiement(in float montant) raises(operationImpossibleException);	// renvoie true si paiement validé, false sinon
	};	
	
};